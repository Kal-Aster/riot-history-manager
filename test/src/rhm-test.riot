<rhm-test>
    <div style="height: 64px; background: #000; color: #fff; font-size: 24px; padding: 8px 16px; box-sizing: border-box;">
        <div style="display: inline-block; width: 1px; margin-right: -1px; height: 100%; vertical-align: middle;"></div>
        <rhm-navigate href="/home" style={
            state.path === "/home" || state.path === "" ? "text-decoration: underline;": "text-decoration: none;"
        }>Home</rhm-navigate>&nbsp;
        <rhm-navigate href="/me" style={
            state.path === "/me" ? "text-decoration: underline;": "text-decoration: none;"
        }>Profile</rhm-navigate>
        <!--  <navigate context="home" style="color: {
            state.context === 'home' ? 'rgb(250, 120, 30)' : '#fff'
        };">Home</navigate>&nbsp;
        <navigate context="profile" style="color: {
            state.context === 'profile' ? 'rgb(250, 120, 30)' : '#fff'
        };">Profile</navigate>  -->
    </div>
    <!--  <navigate href="home">navigate to HOME</navigate>&nbsp;
    <navigate href="me">navigate to ME</navigate>&nbsp;
    <navigate href="users/{ Math.round(Math.random() * 32) }" replace>replace with USERS/:id</navigate>
    <div />
    <div />  -->
    <div>Whole: { state.visible ? "Visible": "Not Visible" }</div>
    <div>Home: { state.homeVisible ? "Visible": "Not Visible" }</div>
    <rhm-test-slot-prop>
        <button onclick={ toggleWhole }>Toggle whole visibility</button><br>
        <button onclick={ toggleHome }>Toggle home visibility</button>
        <rhm-router if={ state.visible }>
            <rhm-route path="home" title="Home" if={ state.homeVisible }>
                <rhm-homepage need-loading></rhm-homepage>
            </rhm-route>
            <rhm-route path="me" title="Profilo">
                <rhm-replace-test need-loading></rhm-replace-test>
                <div onroute={ () => console.log("routed") }>Friends:</div>
                <div style="padding-left: 1em;">
                    <rhm-navigate href="/users/2">Tizio</rhm-navigate><br>
                    <rhm-navigate href="/users/3">Caio</rhm-navigate><br>
                    <rhm-navigate href="/users/4">Sempronio</rhm-navigate>
                </div>
            </rhm-route>
            <rhm-route path="users/:id">
                <div class="asd"></div>
                <span>{ route.location.href }</span>
            </rhm-route>
            <rhm-route path="*route">
                Page not found
            </rhm-route>
        </rhm-router>
    </rhm-test-slot-prop>

    <style>
        .asd {
            width: 100px;
            height: 100px;
            background: url(image.jpg) center/cover;
        }
    </style>
 
    <script>
        import { Router, HistoryManager, URLManager } from "history-manager";
        import lazy from "@riotjs/lazy";
        import TestSlotProp from "./rhm-test-slot-prop.riot";
        window.Router = Router;
        window.HistoryManager = HistoryManager;
        
        if (window._ROUTER_BASE != null) {
            URLManager.base(window._ROUTER_BASE);
        }

        HistoryManager.setAutoManagement(false);
        Router.setContext({
            name: "home",
            paths: [
                { path: "/home" },
                // { path: "me" },
                // { path: "accedi", fallback: true },
                // { path: "users/:id", fallback: true }
                { path: "*route", fallback: true },
            ],
            default: "/home"
        });
        Router.setContext({
            name: "profile",
            paths: [
                { path: "/me" },
                { path: "/accedi", fallback: true },
                { path: "/users/:id", fallback: true }
            ],
            default: "/me"
        });

        export default {
            _lastContext: null,
            _lastPath: null,
            onMounted() {
                Router.create().route("*route", (location) => {
                    let context = Router.getContext();
                    this._lastContext = context;
                    this._lastPath = location.pathname;
                    console.log({
                        context,
                        path: this._lastPath,
                    });
                    this.update({
                        context,
                        path: this._lastPath
                    });
                });
                Router.start("home").then(() => console.log("started"));
            },
            components: {
                "rhm-homepage": lazy(() => import('./rhm-homepage.riot')),
                "rhm-replace-test": lazy(() => import('./rhm-replace-test.riot')),
                "rhm-test-slot-prop": TestSlotProp
            },
            state: {
                visible: true,
                homeVisible: true
            },
            toggleHome() {
                this.update({ homeVisible: !this.state.homeVisible });
            },
            toggleWhole() {
                this.update({ visible: !this.state.visible });
            }
        }
    </script>
</rhm-test>