<rhm-route>
    <script>
        import {
            insertBefore,
            removeChild
            // @ts-expect-error
        } from "@riotjs/util";

        import {
            ROUTER,
            UNROUTE_METHOD,
            LAST_ROUTED,
            TEST_LAST_ROUTED,
            IS_UNMOUNTING,
            PARENT_KEY_SYMBOL,
            CURRENT_ROUTE_INDEX
        } from "./constants";

        import init from "./custom-event-handling/init";
        import dispatchEventOver from "./custom-event-handling/dispatchEventOver";

        import ghost, { END_PLACEHOLDER } from "./ghost";

        import * as loadingBar from "./loading-bar";

        import onroute from "./route-events/onroute";

        export default ghost({
            [IS_UNMOUNTING]: false,
            _valid: false,
            _onroute: null,
            _path: null,
            _remove: null,
            _setup() {
                if (!this._valid || this[IS_UNMOUNTING]) {
                    return;
                }

                const router = this[ROUTER][ROUTER];

                if (this.props.redirect) {
                    router.redirect(this.props.path, this.props.redirect);
                } else {
                    router.route(
                        this._path = this.props.path,
                        this._onroute = onroute(this)
                    );
                }
            },
            onBeforeMount() {
                init();
            },
            onMounted() {
                const router = this[PARENT_KEY_SYMBOL][ROUTER];
                if (router == null) {
                    return;
                }
                this[ROUTER] = router;

                this._valid = true;

                this._remove = router.addRoute(this);

                if (router.isMounted()) {
                    router._refresh();
                } else {
                    this._setup();
                }

                this[PARENT_KEY_SYMBOL][ROUTER][CURRENT_ROUTE_INDEX]++;
            },
            onBeforeUnmount() {
                this[IS_UNMOUNTING] = true;
                this._remove();
            },
            onUnmounted() {
                if (this._valid) {
                    const router = this[PARENT_KEY_SYMBOL][ROUTER];
                    if (router[IS_UNMOUNTING]) {
                        return;
                    }
                    if (router[LAST_ROUTED] === this) {
                        router._refresh();
                    } else {
                        router[ROUTER].unroute(this._path);
                    }
                }

                this[IS_UNMOUNTING] = false;
            },
            onUpdated() {
                if (this._valid) {
                    this[PARENT_KEY_SYMBOL][ROUTER][CURRENT_ROUTE_INDEX]++;
                }
            }
        });
    </script>
</rhm-route>