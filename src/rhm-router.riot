<rhm-router>
    <slot { ...getSelfSlotProp() }></slot>

    <script>
        import { Router, HistoryManager } from "history-manager";

        import {
            IS_UNMOUNTING,
            LAST_ROUTED,
            TEST_LAST_ROUTED,
            ROUTER,
            ROUTER_COMPONENT,
            UNROUTE_METHOD,
            CURRENT_ROUTE_INDEX
        } from "./constants";

        import { DOM_COMPONENT_INSTANCE_PROPERTY } from "./custom-event-handling/constants";

        import ghost from "./ghost";

        import { claim, release } from "./loading-bar";

        const noop = () => { };

        export default ghost({
            [IS_UNMOUNTING]: false,
            _mounted: false,
            routes: null,
            addRoute(route) {
                const routes = this.routes ?? (this.routes = []);
                if (!routes.includes(route)) {
                    routes.splice(this[CURRENT_ROUTE_INDEX], 0, route);
                }

                return () => {
                    const index = routes.indexOf(route);
                    if (index < 0) {
                        return;
                    }

                    routes.splice(index, 1);
                };
            },
            _refresh() {
                let router = this[ROUTER];
                if (this._mounted) {
                    router.destroy();
                    router = this[ROUTER] = Router.create();
                    this.routes?.forEach((route) => {
                        route._setup();
                    });
                }

                router.route("*route", (location, ) => {
                    if (this[TEST_LAST_ROUTED] !== false) {
                        return;
                    }
                    claim(this); release(this);
                    this[LAST_ROUTED] = null;
                    this[UNROUTE_METHOD]();
                    this[UNROUTE_METHOD] = noop;
                });
                if (this._mounted) {
                    const lastRouted = this[LAST_ROUTED];
                    this[TEST_LAST_ROUTED] = null;
                    router.emit();
                    const testLastRouted = this[TEST_LAST_ROUTED];
                    this[TEST_LAST_ROUTED] = false;
                    if (testLastRouted !== lastRouted) {
                        router.emit();
                    }
                }
            },
            getSelfSlotProp() {
                return { [ROUTER_COMPONENT]: this };
            },
            isMounted() {
                return this._mounted;
            },
            onBeforeMount() {
                this[UNROUTE_METHOD] = noop;
                this[ROUTER] = Router.create();
                this[CURRENT_ROUTE_INDEX] = 0;
            },
            onMounted() {
                this._refresh();

                this._mounted = true;

                if (HistoryManager.isStarted()) {
                    this[ROUTER].emit();
                }
            },
            onBeforeUpdate() {
                this[CURRENT_ROUTE_INDEX] = 0;
            },
            onBeforeUnmount() {
                this[IS_UNMOUNTING] = true;
                this[UNROUTE_METHOD]?.();
            },
            onUnmounted() {
                this[IS_UNMOUNTING] = false;

                this[LAST_ROUTED] = null;
                this[UNROUTE_METHOD] = noop;
                this[ROUTER].destroy();
                this[ROUTER] = null;

                this._mounted = false;
            },
            [LAST_ROUTED]: null,
            [TEST_LAST_ROUTED]: false,
        });
    </script>
</rhm-router>